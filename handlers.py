from aiogram import types, Router
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums.parse_mode import ParseMode
from aiogram import F

from models import (set_models_id, set_models_name,
                    set_models_surname, set_models_plus,
                    select_models_fullname)

router = Router()


class RegisterState(StatesGroup):
    first_name = State()
    last_name = State()
    date = State()


@router.message(CommandStart())
async def start(message: types.Message):
    await message.delete()

    markup = InlineKeyboardBuilder()
    markup.add(types.InlineKeyboardButton(
        text='–ù–∞—á–∞—Ç—å',
        callback_data='ready'
    ))

    await set_models_id(int(message.from_user.id))

    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Å—Ç–∞—Ä–æ—Å—Ç–∞ ü´°\n\n–°–µ–π—á–∞—Å –∑–∞–Ω–µ—Å—É —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∂—É—Ä–Ω–∞–ª üìñ',
                         reply_markup=markup.as_markup())


@router.callback_query(F.data.in_({'ready', 'repeat'}))
async def call_ready(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ <b>–ò–º—è</b>', parse_mode=ParseMode.HTML)

    await state.set_state(RegisterState.first_name)


@router.callback_query(F.data == 'cancel')
async def cmd_cancel(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer('–û—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ üîÅ')


@router.message(RegisterState.first_name)
async def text_name(message: types.Message, state: FSMContext):
    if message.text.isalpha():
        await set_models_name(message.text, int(message.from_user.id))

        await message.answer('–ü—Ä–∏–Ω—è—Ç–æ! –ù–∞–ø–∏—à–∏ —Å–≤–æ—é <b>–§–∞–º–∏–ª–∏—é</b>', parse_mode=ParseMode.HTML)

        await state.set_state(RegisterState.last_name)
    else:
        await message.answer('–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ <b>–ò–º—è</b> ‚ùå', parse_mode=ParseMode.HTML)


@router.message(RegisterState.last_name)
async def text_surname(message: types.Message, state: FSMContext):
    if message.text.isalpha():
        markup = InlineKeyboardBuilder()
        markup.add(types.InlineKeyboardButton(
            text='–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
            callback_data='repeat'
        ))

        await set_models_surname(message.text, int(message.from_user.id))

        await message.answer(
            '–ü—Ä–∏–Ω—è—Ç–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n\n–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—à—å '
            '–Ω–∞ –ø–∞—Ä–µ, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "+", —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Ç–µ–±—è –æ—Ç–º–µ—Ç–∏—Ç—å üëÄ',
            reply_markup=markup.as_markup())

        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é <b>–§–∞–º–∏–ª–∏—é</b> ‚ùå', parse_mode=ParseMode.HTML)


@router.message(F.text == '+')
async def plus_command(message: types.Message):
    if await select_models_fullname(message.from_user.id):
        result = await set_models_plus(int(message.from_user.id), message.text)
        if result == '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è':
            await message.answer('–ü–∞—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –∏–ª–∏ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å - –ø–æ–∫–∞ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–µ–ª—å–∑—è üîí')
        elif result == '–£–∂–µ –µ—Å—Ç—å –æ—Ç–º–µ—Ç–∫–∞':
            await message.answer('–£–∂–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è (-–∞—Å—å) ‚úÖ')
        else:
            await message.answer(result)
    else:
        await message.answer('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚ö†Ô∏è')


@router.message()
async def more_message(message: types.Message):
    await message.answer('–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üö´')
